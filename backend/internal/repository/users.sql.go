// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        username,
        password_hash,
        full_name,
        email,
        role_id
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, username, password_hash, full_name, email, is_active, role_id, created_at, version
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	FullName     string
	Email        string
	RoleID       uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.FullName,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.FullName,
		&i.Email,
		&i.IsActive,
		&i.RoleID,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUserByUsername, username)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, full_name, email, is_active, role_id, created_at, version FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.FullName,
		&i.Email,
		&i.IsActive,
		&i.RoleID,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}
